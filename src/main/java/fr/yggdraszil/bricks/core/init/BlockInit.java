package fr.yggdraszil.bricks.core.init;

import fr.yggdraszil.bricks.BricksMod;
import fr.yggdraszil.bricks.objects.blocks.BricksGlass;
import net.minecraft.block.AbstractBlock;
import net.minecraft.block.Block;
import net.minecraft.block.SoundType;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

public class BlockInit
{
    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, BricksMod.MOD_ID);

    // Quartz Blocks
    public static final RegistryObject<Block> QUARTZ_OVERWORLD_ORE = BLOCKS.register("quartz_overworld_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(3.0F).harvestLevel(1).sound(SoundType.STONE)));

    public static final RegistryObject<Block> QUARTZ_SAND = BLOCKS.register("quartz_sand", () -> new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.NONE).harvestTool(ToolType.SHOVEL).strength(0.5F).harvestLevel(0).sound(SoundType.SAND)));
    public static final RegistryObject<Block> QUARTZ_GLASS = BLOCKS.register("quartz_glass", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    public static final RegistryObject<Block> GREEN_QUARTZ_ORE = BLOCKS.register("green_quartz_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(3.0F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GREEN_QUARTZ_BLOCK = BLOCKS.register("green_quartz_block", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GREEN_QUARTZ_ROUGH = BLOCKS.register("green_quartz_rough", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GREEN_QUARTZ_BRICKS = BLOCKS.register("green_quartz_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GREEN_QUARTZ_CARVED = BLOCKS.register("green_quartz_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GREEN_QUARTZ_CHISELED = BLOCKS.register("green_quartz_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> QUARTZ_SAND_GREEN = BLOCKS.register("quartz_sand_green", () -> new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.COLOR_GREEN).harvestTool(ToolType.SHOVEL).strength(0.5F).harvestLevel(0).sound(SoundType.SAND)));
    public static final RegistryObject<Block> QUARTZ_GLASS_GREEN = BLOCKS.register("quartz_glass_green", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    public static final RegistryObject<Block> PINK_QUARTZ_ORE = BLOCKS.register("pink_quartz_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(3.0F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PINK_QUARTZ_BLOCK = BLOCKS.register("pink_quartz_block", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PINK_QUARTZ_ROUGH = BLOCKS.register("pink_quartz_rough", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PINK_QUARTZ_BRICKS = BLOCKS.register("pink_quartz_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PINK_QUARTZ_CARVED = BLOCKS.register("pink_quartz_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PINK_QUARTZ_CHISELED = BLOCKS.register("pink_quartz_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> QUARTZ_SAND_PINK = BLOCKS.register("quartz_sand_pink", () -> new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.COLOR_PINK).harvestTool(ToolType.SHOVEL).strength(0.5F).harvestLevel(0).sound(SoundType.SAND)));
    public static final RegistryObject<Block> QUARTZ_GLASS_PINK = BLOCKS.register("quartz_glass_pink", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    public static final RegistryObject<Block> RED_QUARTZ_ORE = BLOCKS.register("red_quartz_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(3.0F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> RED_QUARTZ_BLOCK = BLOCKS.register("red_quartz_block", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> RED_QUARTZ_ROUGH = BLOCKS.register("red_quartz_rough", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> RED_QUARTZ_BRICKS = BLOCKS.register("red_quartz_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> RED_QUARTZ_CARVED = BLOCKS.register("red_quartz_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> RED_QUARTZ_CHISELED = BLOCKS.register("red_quartz_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> QUARTZ_SAND_RED = BLOCKS.register("quartz_sand_red", () -> new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.COLOR_RED).harvestTool(ToolType.SHOVEL).strength(0.5F).harvestLevel(0).sound(SoundType.SAND)));
    public static final RegistryObject<Block> QUARTZ_GLASS_RED = BLOCKS.register("quartz_glass_red", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    public static final RegistryObject<Block> SMOKY_QUARTZ_ORE = BLOCKS.register("smoky_quartz_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(3.0F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SMOKY_QUARTZ_BLOCK = BLOCKS.register("smoky_quartz_block", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SMOKY_QUARTZ_ROUGH = BLOCKS.register("smoky_quartz_rough", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SMOKY_QUARTZ_BRICKS = BLOCKS.register("smoky_quartz_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SMOKY_QUARTZ_CARVED = BLOCKS.register("smoky_quartz_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SMOKY_QUARTZ_CHISELED = BLOCKS.register("smoky_quartz_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.8F).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> QUARTZ_SAND_SMOKY = BLOCKS.register("quartz_sand_smoky", () -> new Block(AbstractBlock.Properties.of(Material.SAND, MaterialColor.COLOR_BLACK).harvestTool(ToolType.SHOVEL).strength(0.5F).harvestLevel(0).sound(SoundType.SAND)));
    public static final RegistryObject<Block> QUARTZ_GLASS_SMOKY = BLOCKS.register("quartz_glass_smoky", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    // Glowstone
    public static final RegistryObject<Block> GLOWSTONE_BLACK = BLOCKS.register("glowstone_black", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BLUE = BLOCKS.register("glowstone_blue", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BROWN = BLOCKS.register("glowstone_brown", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BROWN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_CYAN = BLOCKS.register("glowstone_cyan", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_CYAN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_GRAY = BLOCKS.register("glowstone_gray", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_GREEN = BLOCKS.register("glowstone_green", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_LIGHT_BLUE = BLOCKS.register("glowstone_light_blue", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_LIGHT_GRAY = BLOCKS.register("glowstone_light_gray", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_LIME = BLOCKS.register("glowstone_lime", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_MAGENTA = BLOCKS.register("glowstone_magenta", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_MAGENTA).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_ORANGE = BLOCKS.register("glowstone_orange", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_ORANGE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_PINK = BLOCKS.register("glowstone_pink", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PINK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_PURPLE = BLOCKS.register("glowstone_purple", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PURPLE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_RED = BLOCKS.register("glowstone_red", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_WHITE = BLOCKS.register("glowstone_white", () -> new Block(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3F).harvestLevel(0).sound(SoundType.GLASS)));

    public static final RegistryObject<Block> GLOWSTONE_BRICKS = BLOCKS.register("glowstone_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_BLACK = BLOCKS.register("glowstone_bricks_black", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_BLUE = BLOCKS.register("glowstone_bricks_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_BROWN = BLOCKS.register("glowstone_bricks_brown", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_CYAN = BLOCKS.register("glowstone_bricks_cyan", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_GRAY = BLOCKS.register("glowstone_bricks_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_GREEN = BLOCKS.register("glowstone_bricks_green", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_LIGHT_BLUE = BLOCKS.register("glowstone_bricks_light_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_LIGHT_GRAY = BLOCKS.register("glowstone_bricks_light_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_LIME = BLOCKS.register("glowstone_bricks_lime", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_MAGENTA = BLOCKS.register("glowstone_bricks_magenta", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_ORANGE = BLOCKS.register("glowstone_bricks_orange", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_PINK = BLOCKS.register("glowstone_bricks_pink", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_PURPLE = BLOCKS.register("glowstone_bricks_purple", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_RED = BLOCKS.register("glowstone_bricks_red", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> GLOWSTONE_BRICKS_WHITE = BLOCKS.register("glowstone_bricks_white", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.GLASS)));

    public static final RegistryObject<Block> GLOW_GLASS = BLOCKS.register("glow_glass", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_BLACK = BLOCKS.register("glow_glass_black", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_BLUE = BLOCKS.register("glow_glass_blue", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_BROWN = BLOCKS.register("glow_glass_brown", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BROWN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_CYAN = BLOCKS.register("glow_glass_cyan", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_CYAN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_GRAY = BLOCKS.register("glow_glass_gray", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_GREEN = BLOCKS.register("glow_glass_green", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.5f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_LIGHT_BLUE = BLOCKS.register("glow_glass_light_blue", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_LIGHT_GRAY = BLOCKS.register("glow_glass_light_gray", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_LIME = BLOCKS.register("glow_glass_lime", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_LIGHT_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_MAGENTA = BLOCKS.register("glow_glass_magenta", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_MAGENTA).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_ORANGE = BLOCKS.register("glow_glass_orange", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_ORANGE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_PINK = BLOCKS.register("glow_glass_pink", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PINK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_PURPLE = BLOCKS.register("glow_glass_purple", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PURPLE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_RED = BLOCKS.register("glow_glass_red", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_WHITE = BLOCKS.register("glow_glass_white", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> GLOW_GLASS_YELLOW = BLOCKS.register("glow_glass_yellow", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_YELLOW).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    // Andesite
    public static final RegistryObject<Block> ANDESITE_BORDERED = BLOCKS.register("andesite_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_BRICKS = BLOCKS.register("andesite_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_CARVED = BLOCKS.register("andesite_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_CHISELED = BLOCKS.register("andesite_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_CHISELED_BRICKS = BLOCKS.register("andesite_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_NERVE = BLOCKS.register("andesite_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_PAVED = BLOCKS.register("andesite_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_SMOOTH = BLOCKS.register("andesite_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ANDESITE_STYLIZED_BRICKS = BLOCKS.register("andesite_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Basalt
    public static final RegistryObject<Block> BASALT_BORDERED = BLOCKS.register("basalt_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_BRICKS = BLOCKS.register("basalt_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_CARVED = BLOCKS.register("basalt_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_CHISELED = BLOCKS.register("basalt_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_CHISELED_BRICKS = BLOCKS.register("basalt_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_NERVE = BLOCKS.register("basalt_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_PAVED = BLOCKS.register("basalt_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_SMOOTH = BLOCKS.register("basalt_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BASALT_STYLIZED_BRICKS = BLOCKS.register("basalt_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Blackstone
    public static final RegistryObject<Block> BLACKSTONE_BORDERED = BLOCKS.register("blackstone_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_BRICKS = BLOCKS.register("blackstone_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_CARVED = BLOCKS.register("blackstone_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_CHISELED = BLOCKS.register("blackstone_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_CHISELED_BRICKS = BLOCKS.register("blackstone_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_NERVE = BLOCKS.register("blackstone_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_PAVED = BLOCKS.register("blackstone_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_SMOOTH = BLOCKS.register("blackstone_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> BLACKSTONE_STYLIZED_BRICKS = BLOCKS.register("blackstone_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Diorite
    public static final RegistryObject<Block> DIORITE_BORDERED = BLOCKS.register("diorite_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_BRICKS = BLOCKS.register("diorite_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_CARVED = BLOCKS.register("diorite_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_CHISELED = BLOCKS.register("diorite_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_CHISELED_BRICKS = BLOCKS.register("diorite_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_NERVE = BLOCKS.register("diorite_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_PAVED = BLOCKS.register("diorite_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_SMOOTH = BLOCKS.register("diorite_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> DIORITE_STYLIZED_BRICKS = BLOCKS.register("diorite_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // End Stone
    public static final RegistryObject<Block> END_STONE_BORDERED = BLOCKS.register("end_stone_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_BRICKS = BLOCKS.register("end_stone_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_CARVED = BLOCKS.register("end_stone_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_CHISELED = BLOCKS.register("end_stone_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_CHISELED_BRICKS = BLOCKS.register("end_stone_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_NERVE = BLOCKS.register("end_stone_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_PAVED = BLOCKS.register("end_stone_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_POLISHED = BLOCKS.register("end_stone_polished", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_SMOOTH = BLOCKS.register("end_stone_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> END_STONE_STYLIZED_BRICKS = BLOCKS.register("end_stone_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Granite
    public static final RegistryObject<Block> GRANITE_BORDERED = BLOCKS.register("granite_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_BRICKS = BLOCKS.register("granite_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_CARVED = BLOCKS.register("granite_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_CHISELED = BLOCKS.register("granite_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_CHISELED_BRICKS = BLOCKS.register("granite_chiseled_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_NERVE = BLOCKS.register("granite_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_PAVED = BLOCKS.register("granite_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_SMOOTH = BLOCKS.register("granite_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> GRANITE_STYLIZED_BRICKS = BLOCKS.register("granite_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Purpur
    public static final RegistryObject<Block> PURPUR_BORDERED = BLOCKS.register("purpur_bordered", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_BRICKS = BLOCKS.register("purpur_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_CARVED = BLOCKS.register("purpur_carved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_CHISELED = BLOCKS.register("purpur_chiseled", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_NERVE = BLOCKS.register("purpur_nerve", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_PAVED = BLOCKS.register("purpur_paved", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_POLISHED = BLOCKS.register("purpur_polished", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_SMOOTH = BLOCKS.register("purpur_smooth", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PURPUR_STYLIZED_BRICKS = BLOCKS.register("purpur_stylized_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(1.5f).harvestLevel(1).sound(SoundType.STONE)));

    // Bamboo
    public static final RegistryObject<Block> BAMBOO_FRAME = BLOCKS.register("bamboo_frame", () -> new BricksGlass(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3f).harvestLevel(1).sound(SoundType.BAMBOO).noOcclusion()));
    public static final RegistryObject<Block> BAMBOO_BLOCK = BLOCKS.register("bamboo_block", () -> new Block(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3f).harvestLevel(1).sound(SoundType.BAMBOO)));
    public static final RegistryObject<Block> BAMBOO_GLASS = BLOCKS.register("bamboo_glass", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3f).sound(SoundType.GLASS).noOcclusion()));

    // Magma Blocks
    public static final RegistryObject<Block> MAGMA_BRICKS = BLOCKS.register("magma_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 5).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> MAGMA_RED_BRICKS = BLOCKS.register("magma_red_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 5).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> MAGMA_BLUE_BRICKS = BLOCKS.register("magma_blue_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).lightLevel((lightLevel) -> 5).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));

    // Others
    public static final RegistryObject<Block> BLUE_NETHER_BRICKS = BLOCKS.register("blue_nether_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLUE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> SUGAR_CANE_BLOCK = BLOCKS.register("sugar_cane_block", () -> new Block(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_LIGHT_GREEN).harvestTool(ToolType.AXE).strength(0.3f).harvestLevel(0).sound(SoundType.VINE)));
    public static final RegistryObject<Block> SUGAR_CANE_FRAME = BLOCKS.register("sugar_cane_frame", () -> new BricksGlass(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3f).harvestLevel(0).sound(SoundType.VINE).noOcclusion()));
    public static final RegistryObject<Block> SUGAR_CANE_GLASS = BLOCKS.register("sugar_cane_glass", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> PLACEHOLDER = BLOCKS.register("placeholder", () -> new Block(AbstractBlock.Properties.of(Material.BARRIER, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(10F).harvestLevel(10).sound(SoundType.METAL)));
    public static final RegistryObject<Block> BLAZE_LANTERN = BLOCKS.register("blaze_lantern", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_ORANGE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS)));
    public static final RegistryObject<Block> SOUL_O_LANTERN = BLOCKS.register("soul_o_lantern", () -> new BricksGlass(AbstractBlock.Properties.of(Material.VEGETABLE, MaterialColor.COLOR_ORANGE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.HOE).strength(1.0f).harvestLevel(0).sound(SoundType.WOOD)));
    public static final RegistryObject<Block> BLAST_STONE = BLOCKS.register("blast_stone", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(3.0f).harvestLevel(1).sound(SoundType.STONE)));

    // Spawner
    public static final RegistryObject<Block> SPAWNER_BLOCK = BLOCKS.register("spawner_block", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).strength(5F).harvestLevel(1).sound(SoundType.METAL).noOcclusion()));

    // Cage
    public static final RegistryObject<Block> IRON_CAGE = BLOCKS.register("iron_cage", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).strength(5F).harvestLevel(1).sound(SoundType.METAL).noOcclusion()));
    public static final RegistryObject<Block> BLAZE_CAGE = BLOCKS.register("blaze_cage", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(5F).harvestLevel(1).sound(SoundType.METAL).noOcclusion()));
    public static final RegistryObject<Block> BAMBOO_CAGE = BLOCKS.register("bamboo_cage", () -> new Block(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_GREEN).harvestTool(ToolType.AXE).strength(0.3F).harvestLevel(1).sound(SoundType.BAMBOO).noOcclusion()));
    public static final RegistryObject<Block> SUGAR_CANE_CAGE = BLOCKS.register("sugar_cane_cage", () -> new Block(AbstractBlock.Properties.of(Material.BAMBOO, MaterialColor.COLOR_LIGHT_GREEN).harvestTool(ToolType.AXE).strength(0.3F).harvestLevel(1).sound(SoundType.BAMBOO).noOcclusion()));

    // Scribe
    public static final RegistryObject<Block> SCRIBE_GLASS = BLOCKS.register("scribe_glass", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> SCRIBE_GLASS_VERTICAL_DOWN = BLOCKS.register("scribe_glass_vertical_down", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> SCRIBE_GLASS_VERTICAL_UP = BLOCKS.register("scribe_glass_vertical_up", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(0.3f).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    // Tech Block
    public static final RegistryObject<Block> TECH_BLOCK_OFF = BLOCKS.register("tech_block_off", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> TECH_BLOCK_ON = BLOCKS.register("tech_block_on", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.METAL).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ENGINE_BLOCK_OFF = BLOCKS.register("engine_block_off", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ENGINE_BLOCK_ON = BLOCKS.register("engine_block_on", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.METAL).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> CONDUCTIVE_BLOCK = BLOCKS.register("conductive_block", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_CYAN).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.METAL)));
    public static final RegistryObject<Block> CHARGED_NETHER_BRICKS = BLOCKS.register("charged_nether_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 8).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> CHARGED_RED_BRICKS = BLOCKS.register("charged_red_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 8).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> CHARGED_BLUE_BRICKS = BLOCKS.register("charged_blue_bricks", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).lightLevel((lightLevel) -> 8).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));

    // Plastic
    public static final RegistryObject<Block> PLASTIC_BLACK = BLOCKS.register("plastic_black", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_BLUE = BLOCKS.register("plastic_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLUE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_BROWN = BLOCKS.register("plastic_brown", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_CYAN = BLOCKS.register("plastic_cyan", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GRAY = BLOCKS.register("plastic_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GREEN = BLOCKS.register("plastic_green", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_LIGHT_BLUE = BLOCKS.register("plastic_light_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_LIGHT_GRAY = BLOCKS.register("plastic_light_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_LIME = BLOCKS.register("plastic_lime", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_MAGENTA = BLOCKS.register("plastic_magenta", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_ORANGE = BLOCKS.register("plastic_orange", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_PINK = BLOCKS.register("plastic_pink", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_PURPLE = BLOCKS.register("plastic_purple", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_RED = BLOCKS.register("plastic_red", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_WHITE = BLOCKS.register("plastic_white", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_YELLOW = BLOCKS.register("plastic_yellow", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));

    public static final RegistryObject<Block> PLASTIC_GLOW_BLACK = BLOCKS.register("plastic_glow_black", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_BLUE = BLOCKS.register("plastic_glow_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_BROWN = BLOCKS.register("plastic_glow_brown", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_CYAN = BLOCKS.register("plastic_glow_cyan", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_GRAY = BLOCKS.register("plastic_glow_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_GREEN = BLOCKS.register("plastic_glow_green", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_LIGHT_BLUE = BLOCKS.register("plastic_glow_light_blue", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_LIGHT_GRAY = BLOCKS.register("plastic_glow_light_gray", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GRAY).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_LIME = BLOCKS.register("plastic_glow_lime", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_MAGENTA = BLOCKS.register("plastic_glow_magenta", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_ORANGE = BLOCKS.register("plastic_glow_orange", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_PINK = BLOCKS.register("plastic_glow_pink", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_PURPLE = BLOCKS.register("plastic_glow_purple", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_RED = BLOCKS.register("plastic_glow_red", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_RED).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_WHITE = BLOCKS.register("plastic_glow_white", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));
    public static final RegistryObject<Block> PLASTIC_GLOW_YELLOW = BLOCKS.register("plastic_glow_yellow", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).lightLevel((lightLevel) -> 15).harvestTool(ToolType.PICKAXE).strength(2f).harvestLevel(1).sound(SoundType.STONE)));

    // Crystal
    public static final RegistryObject<Block> CRYSTAL_BLUE = BLOCKS.register("crystal_blue", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_BLUE).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> CRYSTAL_GREEN = BLOCKS.register("crystal_green", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_GREEN).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> CRYSTAL_PINK = BLOCKS.register("crystal_pink", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PINK).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> CRYSTAL_PURPLE = BLOCKS.register("crystal_purple", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_PURPLE).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> CRYSTAL_WHITE = BLOCKS.register("crystal_white", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.NONE).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));
    public static final RegistryObject<Block> CRYSTAL_YELLOW = BLOCKS.register("crystal_yellow", () -> new BricksGlass(AbstractBlock.Properties.of(Material.GLASS, MaterialColor.COLOR_YELLOW).lightLevel((lightLevel) -> 10).harvestTool(ToolType.PICKAXE).strength(0.5F).harvestLevel(0).sound(SoundType.GLASS).noOcclusion()));

    // Allabogdanite
    public static final RegistryObject<Block> ALLABOGDANITE_ORE = BLOCKS.register("allabogdanite_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(30.0F).harvestLevel(3).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ALLABOGDANITE_BLOCK = BLOCKS.register("allabogdanite_block", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).strength(30.0F).harvestLevel(3).sound(SoundType.METAL)));

    // Asgardium
    public static final RegistryObject<Block> ASGARDIUM_ORE = BLOCKS.register("asgardium_ore", () -> new Block(AbstractBlock.Properties.of(Material.STONE, MaterialColor.NONE).lightLevel((lightLevel) -> 5).harvestTool(ToolType.PICKAXE).strength(30.0F).harvestLevel(3).sound(SoundType.STONE)));
    public static final RegistryObject<Block> ASGARDIUM_BLOCK = BLOCKS.register("asgardium_block", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.NONE).lightLevel((lightLevel) -> 5).harvestTool(ToolType.PICKAXE).strength(30.0F).harvestLevel(3).sound(SoundType.METAL)));
    
    public static final RegistryObject<Block> YGGDRASIL_BLOCK = BLOCKS.register("yggdrasil_block", () -> new Block(AbstractBlock.Properties.of(Material.METAL, MaterialColor.NONE).harvestTool(ToolType.PICKAXE).strength(35.0F).harvestLevel(4).sound(SoundType.METAL)));
}
